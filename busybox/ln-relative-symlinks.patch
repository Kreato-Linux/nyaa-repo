--- ln.c.orig
+++ ln.c
@@ -21,12 +21,13 @@
 /* http://www.opengroup.org/onlinepubs/007904975/utilities/ln.html */
 
 //usage:#define ln_trivial_usage
-//usage:       "[-sfnbtv] [-S SUF] TARGET... LINK|DIR"
+//usage:       "[-srfnbtv] [-S SUF] TARGET... LINK|DIR"
 //usage:#define ln_full_usage "\n\n"
 //usage:       "Create a link LINK or DIR/TARGET to the specified TARGET(s)\n"
 //usage:     "\n	-s	Make symlinks instead of hardlinks"
 //usage:     "\n	-f	Remove existing destinations"
 //usage:     "\n	-n	Don't dereference symlinks - treat like normal file"
+//usage:     "\n	-r	Create symlinks relative to link location (with -s)"
 //usage:     "\n	-b	Make a backup of the target (if exists) before link operation"
 //usage:     "\n	-S SUF	Use suffix instead of ~ when making backup files"
 //usage:     "\n	-T	Treat LINK as a file, not DIR"
@@ -48,7 +49,74 @@
 #define LN_SUFFIX           (1 << 4)
 #define LN_VERBOSE          (1 << 5)
 #define LN_LINKFILE         (1 << 6)
+#define LN_RELATIVE         (1 << 7)
 
+static int common_prefix_length(const char *path1, const char *path2)
+{
+	const char *start1 = path1;
+
+	/* NB: Function assumes absolute paths */
+
+	/* Find common string prefix */
+
+	while (*path1 && *path2 && *path1 == *path2) {
+		path1++;
+		path2++;
+	}
+
+	/* Search backwards to common path-component prefix */
+
+	while (path1 > start1 && *path1 != '/') {
+		path1--;
+	}
+
+	return (path1 + 1) - start1;
+}
+
+static char *xmalloc_relativized_target(const char *target, const char *src)
+{
+	const char *target_abs, *src_abs, *src_last, *sp;
+	char *out, *op;
+	int out_len, common_len;
+
+	/* Absolutize both inputs */
+
+	target_abs = bb_simplify_path(target);
+	src_abs = bb_simplify_path(src);
+
+	/* Output can't be longer than twice the longest absolutized input */
+
+	out_len = 1 + 2 * MAX(strlen(target_abs), strlen(src_abs));
+	out = op = xmalloc(out_len);
+
+	/* Skip common leading components */
+
+	common_len = common_prefix_length(target_abs, src_abs);
+	sp = src_abs + common_len;
+
+	/* Output "../" for each non-tail component remaining in src */
+
+	src_last = bb_get_last_path_component_nostrip(src_abs);
+	while (sp < src_last) {
+		if ('/' == *sp) {
+			*op++ = '.';
+			*op++ = '.';
+			*op++ = '/';
+		}
+		sp++;
+	}
+
+	/* Append target postfix */
+
+	strcpy(op, target_abs + common_len);
+
+	free((char *)target_abs);
+	free((char *)src_abs);
+
+	return out;
+}
+
+
 int ln_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int ln_main(int argc, char **argv)
 {
@@ -57,11 +125,13 @@
 	char *last;
 	char *src_name;
 	char *src;
+	char *target;
 	char *suffix = (char*)"~";
 	struct stat statbuf;
 	int (*link_func)(const char *, const char *);
 
-	opts = getopt32(argv, "^" "sfnbS:vT" "\0" "-1", &suffix);
+	opts = getopt32(argv, "^" "sfnbS:vTr" "\0" "-1", &suffix);
+
 /*
 	-s, --symbolic		make symbolic links instead of hard links
 	-f, --force		remove existing destination files
@@ -145,17 +215,26 @@
 		}
 
 		link_func = link;
+		target = *argv;
 		if (opts & LN_SYMLINK) {
 			link_func = symlink;
+			if (opts & LN_RELATIVE) {
+				target = xmalloc_relativized_target(*argv, src);
+			}
 		}
 
 		if (opts & LN_VERBOSE) {
-			printf("'%s' -> '%s'\n", src, *argv);
+			printf("'%s' -> '%s'\n", src, target);
 		}
 
-		if (link_func(*argv, src) != 0) {
+		if (link_func(target, src) != 0) {
 			bb_simple_perror_msg(src);
 			status = EXIT_FAILURE;
+		}
+
+		if (target != *argv) {
+			free(target);
+			target = NULL;
 		}
 
 		free(src_name);

